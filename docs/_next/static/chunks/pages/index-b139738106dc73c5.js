(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[405],{5301:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/",function(){return s(5075)}])},5075:function(e,n,s){"use strict";s.r(n);var r=s(5893),i=s(5988),t=s(9008),o=s(7852),a=s.n(o),l=s(3226),c=s(4142),d=s(7294);function h(e,n,s){return n in e?Object.defineProperty(e,n,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[n]=s,e}function u(e){return function(e){if(Array.isArray(e)){for(var n=0,s=new Array(e.length);n<e.length;n++)s[n]=e[n];return s}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var x=null!==new URLSearchParams(window.location.search).get("presenter"),j=function(e){var n=e.children;return(0,r.jsx)(l.Z,{customStyle:{display:"inline-block",padding:0,fontSize:"14px"},language:"typescript",style:c.Z,children:n})},p=[{question:(0,r.jsx)("p",{children:"Hello!"}),answer:(0,r.jsx)("p",{children:"Hi!"})},{question:(0,r.jsxs)("p",{children:["Have you read ",(0,r.jsx)("em",{children:"The Little Schemer"})," or ",(0,r.jsx)("em",{children:"The Little Typer"}),"?"]}),answer:(0,r.jsx)("p",{children:"No..."})},{question:(0,r.jsx)("p",{children:"Have you used TypeScript?"}),answer:(0,r.jsx)("p",{children:"I have! But I am not sure if I understand it well."})},{question:(0,r.jsx)("p",{children:"Have you have dinner yet?"}),answer:(0,r.jsxs)("p",{children:["No, ","I'm not "," hungry yet."]})},{question:(0,r.jsx)("p",{children:"Let's play around with it a bit!"}),answer:(0,r.jsx)("p",{children:"Ok!"})},{section:"Basic ingredients!"},{question:(0,r.jsxs)("p",{children:["What's the type of ",(0,r.jsx)("code",{children:"42"}),"?"]}),answer:(0,r.jsxs)("p",{children:["That's easy as pie! It's"," ",(0,r.jsx)("code",{children:"number"}),"."]})},{question:(0,r.jsx)("p",{children:"Is it the only valid type?"}),answer:(0,r.jsxs)("p",{children:["It could also be "," ",(0,r.jsx)("code",{children:"number | undefined"}),"."]})},{question:(0,r.jsxs)("p",{children:["What is a value of type ",(0,r.jsx)("code",{children:"null"}),"?"]}),answer:(0,r.jsxs)("p",{children:[(0,r.jsx)("code",{children:"null"}),"."]})},{question:(0,r.jsxs)("p",{children:["How many values have type  ",(0,r.jsx)("code",{children:"null"}),"?"]}),answer:(0,r.jsxs)("p",{children:["Just one: ",(0,r.jsx)("code",{children:"null"}),"."]})},{question:(0,r.jsxs)("p",{children:["Is there a type that has  ",(0,r.jsx)("code",{children:"42"})," as its only value?"]}),answer:(0,r.jsx)("p",{children:"I don't know."})},{question:(0,r.jsxs)("p",{children:[(0,r.jsx)("code",{children:"42"})," is also valid type. So are most literal values.",(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:"const x: 42 = 42;  // ok\nconst x: 42 = 41;  // error\n"})]}),answer:(0,r.jsxs)("p",{children:["Oh! So it works for "," ",(0,r.jsx)("code",{children:'true, false, "potato"'}),"."]})},{question:(0,r.jsx)("p",{children:"Indeed! They accept the corresponding type as a value only."}),answer:(0,r.jsx)("p",{children:"Cool. "})},{question:(0,r.jsxs)("p",{children:["What are some values of the type ",(0,r.jsx)("code",{children:"{ x: null }"})," ?"]}),answer:(0,r.jsxs)("p",{children:["As before, ",(0,r.jsx)("code",{children:"{x: null }"}),"."]})},{question:(0,r.jsx)("p",{children:"Is there any other value with that type?"}),answer:(0,r.jsx)("p",{children:"It should not...?"})},{question:(0,r.jsxs)("p",{children:["Well, ",(0,r.jsx)("code",{children:"{ x: null, y: 0}"})," is also a valid value for that type."]}),answer:(0,r.jsx)("p",{children:"How?"})},{question:(0,r.jsx)("p",{children:'You should read interface types as "at least those properties". But it might have more!'}),answer:(0,r.jsx)("p",{children:"I see!"})},{question:(0,r.jsx)("p",{children:"Are there other ways to create compound types?"}),answer:(0,r.jsx)("p",{children:"Maybe?"})},{question:(0,r.jsxs)("p",{children:["TypeScript also supports tuples.",(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:"type T = [boolean, boolean]"})]}),answer:(0,r.jsxs)("p",{children:["Let me guess, ",(0,r.jsx)("code",{children:"[true, false]"})," has that type."]})},{question:(0,r.jsx)("p",{children:"You are learning fast!"}),answer:(0,r.jsx)("div",{})},{question:(0,r.jsx)("p",{children:"How many values have this type?"}),answer:(0,r.jsx)("p",{children:"4."})},{question:(0,r.jsxs)("p",{children:["Finally, you can also type functions, for example",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:"type T = (x: number) => number"}),(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"or",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:"function f (x: number): number { ... }"})]}),answer:(0,r.jsx)("p",{children:"I knew that."})},{section:"Combining ingredients"},{question:(0,r.jsxs)("p",{children:["What are some values for the type ",(0,r.jsx)("code",{children:"string | number"}),"?"]}),answer:(0,r.jsxs)("p",{children:[(0,r.jsx)("code",{children:"1"}),", ",(0,r.jsx)("code",{children:"24"}),", and ",(0,r.jsx)("code",{children:'"blueberry"'}),"."]})},{question:(0,r.jsxs)("p",{children:["What about type ",(0,r.jsx)(j,{children:"type T = string & number"}),"?"]}),answer:(0,r.jsxs)("p",{children:["That is impossible. There is no value that is both a ",(0,r.jsx)("code",{children:"string"})," ","and a ",(0,r.jsx)("code",{children:"number"}),"."]})},{question:(0,r.jsx)("p",{children:"So, how many values have that that type?"}),answer:(0,r.jsx)("p",{children:"Zero."})},{question:(0,r.jsxs)("p",{children:["Exactly. The type ",(0,r.jsx)("code",{children:"never"})," has also zero values."]}),answer:(0,r.jsx)("p",{children:"I don't see how that could be useful."})},{question:(0,r.jsxs)("p",{children:["What type is ",(0,r.jsx)("code",{children:"string | never"})," equal to?"]}),answer:(0,r.jsxs)("p",{children:[(0,r.jsx)("code",{children:"string"}),". Because any value with that type, must be of type "," ",(0,r.jsx)("code",{children:"string"}),"."]})},{question:(0,r.jsxs)("p",{children:["What is a valid value for the type"," ",(0,r.jsx)(j,{children:"type T = {x: number} & {y: number}"})]}),answer:(0,r.jsx)("p",{children:(0,r.jsx)(j,{children:"const obj: T = {x: 1, y: 3}"})})},{question:(0,r.jsxs)("p",{children:["What is a valid value for the type"," ",(0,r.jsx)(j,{children:"type T = {x: number} & {x: string}"})]}),answer:(0,r.jsx)("p",{children:"That is impossible as well."})},{question:(0,r.jsxs)("p",{children:["What is a valid value for the type"," ",(0,r.jsx)(j,{children:"type T = {x: number} | {y: number}"})]}),answer:(0,r.jsx)("p",{children:(0,r.jsx)(j,{children:"const obj: T = {x: 1}"})})},{question:(0,r.jsxs)("p",{children:["Is ",(0,r.jsx)(j,{children:"{x: 1, y: 2}"})," a valid value for that type?"]}),answer:(0,r.jsx)("p",{children:"Yes"})},{question:(0,r.jsxs)("p",{children:[(0,r.jsx)(j,{children:"\ntype T = {x: number, z: number}\n       | {y: number, z: number}\n\nconst obj: T = {x: 1, y: 2}\n"})," ",(0,r.jsx)("br",{})," Is this valid?"]}),answer:(0,r.jsx)("p",{children:"No. It fails. Because the value does not belong to any of the individual types."})},{question:(0,r.jsxs)("p",{children:[(0,r.jsx)(j,{children:"type T = {x: number} | {y: number}\nconst obj: T = {x: 1, y: 2}\n"})," ",(0,r.jsx)("br",{})," Why is this valid?"]}),answer:(0,r.jsxs)("p",{children:[(0,r.jsx)("code",{children:"obj"})," is a valid value for both ",(0,r.jsx)("code",{children:"{x: number}"}),(0,r.jsx)("br",{})," and ",(0,r.jsx)("code",{children:"{y: number}"}),", so it must be also in the union."]})},{question:(0,r.jsxs)("p",{children:["Why is it valid",(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:"\ntype T = {x: number, z: number}\n       | {y: number, z: number}\n\nconst obj: T = {x: 1, y: 2, z: 0}\n"}),"?"]}),answer:(0,r.jsxs)("p",{children:[(0,r.jsx)("code",{children:"obj"})," is a valid value for both types so it must be also in the union."]})},{section:"Bread or Butter"},{question:(0,r.jsxs)("p",{children:["Let's go shopping",(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:"\ntype Bread = {\n  type: 'sour' | 'corn' | 'brioche',\n  weight: number\n}\n\ntype Butter = { salty: boolean }\n\ntype SideDish = Bread | Butter\n\n"})]}),answer:(0,r.jsxs)("p",{children:["Got it. Should I refrigate it?",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:"function refrigerate (x: Bread | Butter) {\n  // ...\n}"})]})},{question:(0,r.jsxs)("p",{children:["You can use regular control flow `(if, throw, ...)` to"," ",(0,r.jsx)("b",{children:"refine the type"})]}),answer:(0,r.jsx)("p",{children:"Can you show me an example?"})},{question:(0,r.jsx)("p",{children:(0,r.jsx)(j,{children:"function refrigerate (x: Bread | Butter) {\n  if ('type' in x) {\n    // x is now type Bread\n  } else {\n    // x is now type Butter\n  }\n}"})}),answer:(0,r.jsx)("p",{children:"That's useful. Now I know."})},{question:(0,r.jsxs)("p",{children:["There is a problem with this code, though. ",(0,r.jsx)("br",{}),"Can you find some ",(0,r.jsx)("b",{children:"butterbread"}),"?"]}),answer:(0,r.jsxs)("p",{children:["Oops. I found this ",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:"const butterbread: Butter & Bread = {\n  type: 'sour',\n  weight: 500,\n  salty: false\n}"})," ",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"Looks awful."]})},{question:(0,r.jsx)("p",{children:"Can you fix the definitions to prevent this?"}),answer:(0,r.jsx)("p",{children:"Let me think"})},{question:(0,r.jsx)("p",{}),answer:(0,r.jsxs)("p",{children:["I think I fixed it!",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:"\ntype Bread = {\n  food: 'bread',// <-----\n  type: 'sour' | 'corn' | 'brioche',\n  weight: number\n}\n\ntype Butter = {\n  food: 'butter',// <-----\n  salty: boolean\n}\n\ntype SideDish = Bread | Butter\n"})]})},{question:(0,r.jsx)("p",{children:"Excellent! Can you explain why it works?"}),answer:(0,r.jsxs)("p",{children:["Because it is imposible to have a value that is ",(0,r.jsx)("code",{children:"Bread & Butter"}),", ",(0,r.jsx)("br",{}),"because ",(0,r.jsx)("code",{children:"food"})," would have type ",(0,r.jsx)("code",{children:"never"}),"."]})},{question:(0,r.jsxs)("p",{children:["This pattern is called ",(0,r.jsx)("b",{children:"discriminated union"}),".",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"Now Enjoy your ",(0,r.jsx)("code",{children:"[Bread, Butter]"}),"."]}),answer:(0,r.jsx)("p",{})},{section:"Generics"},{question:(0,r.jsxs)("p",{children:["What is a good type for ",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:"function id (x) { return x }"})]}),answer:(0,r.jsxs)("p",{children:["hm... ",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:"function id (x: number): number {\n  return x;\n}\n  "}),"?"]})},{question:(0,r.jsxs)("p",{children:["Well, ",(0,r.jsx)("code",{children:"x"})," could be as well a string for example, right?"]}),answer:(0,r.jsxs)("p",{children:["what about ",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:"function id (x: number | string): number | string {\n  return x;\n}\n"}),"?"]})},{question:(0,r.jsx)("p",{children:"Does this type guarantee the same type as the argument is returned?"}),answer:(0,r.jsxs)("p",{children:["Not really ",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:'function id (x: number | string): number | string {\n  return "foo";\n}\n'}),(0,r.jsx)("br",{}),"For example, this implementation returns a string even if the argument is number."]})},{question:(0,r.jsxs)("p",{children:[(0,r.jsx)("b",{children:"Generic"})," parameters introduce type variables that solve this issue.",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:"function id<T>(x: T): T {\n  return x;\n}"})]}),answer:(0,r.jsx)("p",{children:"I see. Now the return type is always the same as the input."})},{question:(0,r.jsx)("p",{children:"How many functions have the same type?"}),answer:(0,r.jsx)("p",{children:"Depends how you consider two functions the same."})},{question:(0,r.jsxs)("p",{children:["How many functions have the type ",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:"function f<T>(x: number): T { ... }"})," ",(0,r.jsx)("br",{}),"?"]}),answer:(0,r.jsx)("p",{children:"None? How can we return something of a type we don't know or have?"})},{section:"The Promise of Pizza"},{question:(0,r.jsx)("p",{children:"Time to order some pizza!"}),answer:(0,r.jsx)("p",{children:"Sounds simple enough."})},{question:(0,r.jsxs)("p",{children:["Let's start with placing the order. What does ",(0,r.jsx)("code",{children:"fetch()"})," ","return?"]}),answer:(0,r.jsxs)("p",{children:["It's a ",(0,r.jsx)("code",{children:"Promise"})]})},{question:(0,r.jsxs)("p",{children:["Indeed! But what is inside of that ",(0,r.jsx)("code",{children:"Promise"})," wrapper?"]}),answer:(0,r.jsxs)("p",{children:["It depends on what is being fetched, so ",(0,r.jsx)("code",{children:"Promise<any>"})]})},{question:(0,r.jsxs)("p",{children:["What if we specifically call ",(0,r.jsx)("code",{children:'fetch("UberEats/pizza")'}),"?"]}),answer:(0,r.jsxs)("p",{children:["Then we can narrow it down to ",(0,r.jsx)("code",{children:"Promise<Pizza>"})]})},{question:(0,r.jsxs)("p",{children:["So this should work now:",(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:'\n  function getPizza(): Promise<Pizza> {\n    return fetch("UberEats/pizza")\n  }\n\n  function eatPizza(bite: Pizza): void {\n    console.log("Nom!")\n  }\n\n  const pizza = await getPizza()\n  eatPizza(pizza)'})]}),answer:(0,r.jsx)("p",{children:"Looks good to me!"})},{question:(0,r.jsx)("p",{children:"What if the restaurant mixes up your order?"}),answer:(0,r.jsx)("p",{children:"No worries, it's all type checked!"})},{question:(0,r.jsx)("p",{children:"Does TS also check it at run-time?"}),answer:(0,r.jsx)("p",{children:"I guess not... So the types are useless?"})},{question:(0,r.jsx)("p",{children:"Or maybe we used the wrong type?"}),answer:(0,r.jsx)("p",{children:"Yes, but we don't really know what type it will be"})},{question:(0,r.jsxs)("p",{children:["What if we consider the type to be ",(0,r.jsx)("code",{children:"unknown"})," explicitly?",(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:'\n  function getPizzaHopefully(): Promise<unknown> {\n    return fetch("UberEats/pizza")\n  }'})]}),answer:(0,r.jsxs)("p",{children:["I suppose... But how can we do anything with an ",(0,r.jsx)("code",{children:"unknown"})," ","value?"]})},{question:(0,r.jsxs)("p",{children:["Good question! What if we had a function like this:",(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:"\n  function smellsLikePizza(thing: unknown): boolean {\n    // nose-related code\n  }"}),(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"Could you use this to call ",(0,r.jsx)("code",{children:"eatPizza()"})," safely?"]}),answer:(0,r.jsxs)("p",{children:["Of course! We can validate the result first:",(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:"\n  if (smellsLikePizza(thing)) {\n    eatPizza(thing)\n  }\n  "})]})},{question:(0,r.jsx)("p",{children:"Looks good! Does it also pass the type-check?"}),answer:(0,r.jsxs)("p",{children:["No... ",(0,r.jsx)("code",{children:"thing"})," is still ",(0,r.jsx)("code",{children:"unknown"})]})},{question:(0,r.jsx)("p",{children:"Any idea how to make it work?"}),answer:(0,r.jsxs)("p",{children:["Well, I'm pretty sure it is ",(0,r.jsx)("code",{children:"Pizza"}),", so I could just manually cast the type:",(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:"\n  if (smellsLikePizza(thing)) {\n    const pizza = thing as Pizza\n    eatPizza(pizza)\n  }\n  "}),(0,r.jsx)("br",{}),(0,r.jsx)("br",{})]})},{question:(0,r.jsxs)("p",{children:["That works! But the type cast is not very elegant. How about we make TS understand what ",(0,r.jsx)("code",{children:"smellsLikePizza"})," is doing?"]}),answer:(0,r.jsx)("p",{children:"Sound good, but how?"})},{question:(0,r.jsxs)("p",{children:["We can create our own type guard:",(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:"\n  function smellsLikePizza(thing: unknown): thing is Pizza {\n    // the same nose-related code\n  }"})]}),answer:(0,r.jsxs)("p",{children:["Cool! So now this should work again",(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:"\n  if (smellsLikePizza(thing)) {\n    eatPizza(thing)\n  }\n  "})]})},{question:(0,r.jsxs)("p",{children:["Let's go a bit further! Can you create a function"," ",(0,r.jsx)(j,{children:"(thing: unknown) => Pizza"}),"?"]}),answer:(0,r.jsxs)("p",{children:["No?! You can't turn ",(0,r.jsx)("em",{children:"everything"})," into Pizza"]})},{question:(0,r.jsxs)("p",{children:["Would this do the trick?",(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:'\n  function ensureItsPizza(thing: unknown): Pizza {\n    if (smellsLikePizza(thing)) {\n      return thing\n    } else {\n      throw new Error("Someone messed up!")\n    }\n  }\n\n  eatPizza(ensureItsPizza(thing))\n  '})]}),answer:(0,r.jsx)("p",{children:"I see, the Error prevents us from eating the wrong order"})},{question:(0,r.jsxs)("p",{children:["Exactly. Can you now rewrite our ",(0,r.jsx)("code",{children:"getPizza()"})," to always deliver Pizza?"]}),answer:(0,r.jsxs)("p",{children:["Easy!",(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:'\n  async function getPizza(): Promise<Pizza> {\n    const thing: unknown = await fetch("UberEats/pizza")\n    const pizza: Pizza = ensureItsPizza(thing)\n    return pizza\n  }'})]})},{question:(0,r.jsxs)("p",{children:["That ",(0,r.jsx)("code",{children:"ensureItsPizza"})," is called a ",(0,r.jsx)("strong",{children:"Decoder"}),".",(0,r.jsx)("br",{}),"Libraries like ",(0,r.jsx)("a",{href:"https://github.com/gcanti/io-ts",children:"io-ts"})," help you create them more easily!"]}),answer:(0,r.jsx)("p",{children:":)"})},{section:"Fine dining type-level dessert"},{question:(0,r.jsx)("p",{children:"Oh, you are still there!"}),answer:(0,r.jsx)("p",{children:"Of course!"})},{question:(0,r.jsx)("p",{children:"It's time for some dessert."}),answer:(0,r.jsx)("p",{children:"What do you have?"})},{question:(0,r.jsx)("p",{children:"It depends. Do you have any allergies"}),answer:(0,r.jsx)("p",{children:(0,r.jsx)(j,{children:"type Allergies = 'almond' | 'egg'"})})},{question:(0,r.jsxs)("p",{children:["What is a value for",(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:'\nconst x: Safe<"chocolate"> = ...\n'})]}),answer:(0,r.jsx)("p",{children:"true?"})},{question:(0,r.jsxs)("p",{children:["What is a value for",(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:'\nconst x: Safe<"egg"> = ...\n'})]}),answer:(0,r.jsx)("p",{children:"false."})},{question:(0,r.jsxs)("p",{children:["What is a value for",(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:'\nconst x: Safe<"egg" | "chocolate"> = ...\n'})]}),answer:(0,r.jsx)("p",{children:"It depends?."})},{question:(0,r.jsxs)("p",{children:["Type parameters in conditionals that are not wrapped are ",(0,r.jsx)("b",{children:"naked"}),"."]}),answer:(0,r.jsx)("p",{children:"How is that releated to my dessert?"})},{question:(0,r.jsx)("p",{children:"Naked type parameters distribute over union."}),answer:(0,r.jsx)("p",{children:"I am still lost."})},{question:(0,r.jsxs)("p",{children:["What is a value for",(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:'\ntype T = Safe<"egg" | "chocolate">\n'}),(0,r.jsx)("br",{})," must be equal to ",(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:'\ntype T = Safe<"egg"> | Safe<"chocolate">\n'})]}),answer:(0,r.jsxs)("p",{children:["I see. Then I can evaluate each Safe individually to get"," ",(0,r.jsx)("code",{children:"boolean"}),"."]})},{question:(0,r.jsxs)("p",{children:["Exactly ",(0,r.jsx)("br",{}),(0,r.jsx)(j,{children:'\ntype T = Safe<"egg"> | Safe<"chocolate">\n\ntype T =       false |              true\n'}),(0,r.jsx)("br",{})]}),answer:(0,r.jsx)("p",{children:"It makes sense, I guess."})},{section:"Conditional Persimmon & Recursive Parsley"},{question:(0,r.jsx)("p",{children:"We can leave this for another time!"}),answer:(0,r.jsx)("p",{})},{section:"Spicy Curry at Howard's"},{question:(0,r.jsx)("p",{children:"We can leave this for another time!"}),answer:(0,r.jsx)("p",{})},{section:"Enjoy your food!"}];function y(e){var n=e.index,s=e.question,t=e.answer,o=e.showAnswer,a=e.past,l=e.onClick;return(0,r.jsxs)("div",{onClick:l,className:i.default.dynamic([["d1db802a5eb7adda",[a?.3:1]]])+" row",children:[(0,r.jsx)("div",{className:i.default.dynamic([["d1db802a5eb7adda",[a?.3:1]]])+" index",children:n}),(0,r.jsx)("div",{className:i.default.dynamic([["d1db802a5eb7adda",[a?.3:1]]])+" question",children:s}),(0,r.jsx)("div",{style:{opacity:o?1:x?.1:0},className:i.default.dynamic([["d1db802a5eb7adda",[a?.3:1]]])+" answer",children:t}),(0,r.jsx)(i.default,{id:"d1db802a5eb7adda",dynamic:[a?.3:1],children:".row.__jsx-style-dynamic-selector {display:-webkit-box;\ndisplay:-webkit-flex;\ndisplay:-ms-flexbox;\ndisplay:flex;\nwidth:100%;\nborder-bottom:1px solid #e8e8e8;\nmin-height:50px;\npadding-top:10px;\npadding-bottom:10px;\nopacity:".concat(a?.3:1,';\ngap:20px}\n.question.__jsx-style-dynamic-selector, .answer.__jsx-style-dynamic-selector {width:100%}\n.index.__jsx-style-dynamic-selector {position:"absolute";\nleft:0;\ntop:0;\nfont-size:0.7em}')})]})}n.default=function(){var e=(0,d.useState)(0),n=e[0],s=e[1],i=(0,d.useState)([]),o=i[0],l=i[1],c=(0,d.useCallback)((function(){var e=localStorage.getItem("step");e&&s(JSON.parse(e));var n=localStorage.getItem("highlights");n&&l(JSON.parse(n))}),[]);(0,d.useEffect)((function(){c()}),[c]),(0,d.useEffect)((function(){window.scrollTo(0,document.body.scrollHeight),l([]),localStorage.setItem("step",JSON.stringify(n))}),[n]),(0,d.useEffect)((function(){localStorage.setItem("highlights",JSON.stringify(o))}),[o]),(0,d.useEffect)((function(){var e=function(e){switch(e.key){case" ":case"ArrowRight":return void s((function(e){return Math.min(2*p.length-1,e+1)}));case"Backspace":case"ArrowLeft":return void s((function(e){return Math.max(0,e-1)}));case"Home":return void s(0)}};return document.addEventListener("keydown",e),function(){document.removeEventListener("keydown",e)}}),[]),(0,d.useEffect)((function(){var e=function(){c()};return window.addEventListener("storage",e),function(){window.removeEventListener("storage",e)}}),[c]),(0,d.useEffect)((function(){var e=function(){document.fullscreenElement?document.exitFullscreen():document.documentElement.requestFullscreen()};return document.addEventListener("dblclick",e),function(){return document.removeEventListener("dblclick",e)}}),[]);var j=n/2|0,w=n%2===1;return(0,r.jsxs)("div",{className:a().container,children:[(0,r.jsxs)(t.default,{children:[(0,r.jsx)("title",{children:"The Little TypeScripter"}),(0,r.jsx)("meta",{name:"description",content:"The Little TypeScripter"}),(0,r.jsx)("link",{rel:"icon",href:"/favicon.ico"})]}),(0,r.jsxs)("main",{className:a().main,children:[(0,r.jsx)("h1",{className:a().title,children:"The Little TypeScripter"}),(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),p.slice(0,j+1+(x?1:0)).map((function(e,n){if("section"in e)return(0,r.jsx)("h2",{children:e.section});var s=e.question,i=e.answer,t=n<j,a=function(e){for(var n=1;n<arguments.length;n++){var s=null!=arguments[n]?arguments[n]:{},r=Object.keys(s);"function"===typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(s).filter((function(e){return Object.getOwnPropertyDescriptor(s,e).enumerable})))),r.forEach((function(n){h(e,n,s[n])}))}return e}({width:"100%"},n>j?{backgroundColor:"#e5e5e5",opacity:.5}:{});return(0,r.jsx)("div",{style:a,children:(0,r.jsx)(y,{index:n,question:s,showAnswer:n<j||n===j&&w,answer:i,past:t&&!o.includes(n),onClick:function(){l((function(e){return u(e).concat([n])}))}},n)})}))]})]})}},7852:function(e){e.exports={container:"Home_container__1EcsU",main:"Home_main__1x8gC",footer:"Home_footer__1WdhD",title:"Home_title__3DjR7",description:"Home_description__17Z4F",code:"Home_code__axx2Y",grid:"Home_grid__2Ei2F",card:"Home_card__2SdtB",logo:"Home_logo__1YbrH"}}},function(e){e.O(0,[171,774,888,179],(function(){return n=5301,e(e.s=n);var n}));var n=e.O();_N_E=n}]);